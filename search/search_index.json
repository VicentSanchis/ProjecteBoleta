{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projecte Bola de Drac","text":"<p>El projecte de la bola de drac \u00e9s un xicotet joc que desenvoluparem a classe amb Java i Processing IDE. En aquest projecte es pret\u00e9n  simular un sistema de f\u00edsiques molt simple en el que una bola caur\u00e0 poc a poc gr\u00e0cies a la for\u00e7a de la gravetat com mostra la imatge seg\u00fcent:</p> <p> </p> <p>Poc a poc i al mateix temps que anem assolint els coneixements necessaris ampliarem les funcionalitats de la bola, per exemple que puga rebotar quan toque les vores de l'aplicaci\u00f3, que puguem utilitzar els cursors al joc per impulsar o moure la bola.</p> <p>Finalment i si ens dona temps es poden afegir tamb\u00e9 obstacles, enemics i animacions...</p>"},{"location":"#el-llenguatge-java","title":"El llenguatge Java","text":"<p>En aquest tema 3 hem vist b\u00e0sicament la sintaxi de Java. \u00c9s per tant el tema m\u00e9s dens que hem vist de moment i amb molts conceptes que assolir. A continuaci\u00f3 i basant-nos en aquest xicotet projecte, revisarem un a un aquestos conceptes construint pas a pas el projecte.  Si no recordes algun concepte vist a classe, et recomane que revises els apartats mentre anem mirant-los. Comencem per les dades, variables i identificadors.</p>"},{"location":"#dades-variables-identificadors","title":"Dades Variables identificadors","text":"<p>El primer que has de fer \u00e9s molt senzill, obre l'entorn de desenvolupament integrat de Processing IDE, copia el codi que tens a continuaci\u00f3 i apega'l a l'editor. Aquest codi ser\u00e0 la base per al projecte de la boleta que desenvoluparem pas a pas. Finalment guarda'l amb el nom ProjecteBola.pde per exemple.</p> Codi base sobre el que construirem el projecte <pre><code>    /**\n     * Projecte Bola de Drac\n     * Xicotet projecte de simulaci\u00f3 d'un sistema de f\u00edsiques que finalment acabar\u00e0 convertint-se en un joc \n     * simple amb enemics, obstacles i puntuaci\u00f3\n     * @author Vicent Sanchis\n     * @since  10/10/2023\n     * @version 1.0\n     */\n// Constants\n\n// Variables Globals\n\n/**\n     * M\u00e8tode setup\n     * M\u00e8tode de configuraci\u00f3 de l'aplicaci\u00f3,  nom\u00e9s s'executa una volta\n     * Ac\u00ed solen anar les inicialitzacions i setup inicial\n     * @return void\n     */\nvoid setup ( ) {\nsize (640, 480);   // Defineix la grand\u00e0ria de la pantalla de la nostra aplicaci\u00f3\n}\n\n/**\n     * M\u00e8tode draw\n     * M\u00e8tode que s'executa tantes vegades per segon com fps estiga configurat\n     * Tamb\u00e9 conegut com el bucle de joc. Ac\u00ed va el principal del programa\n     * @return void\n     */\nvoid draw () {\n\n}\n</code></pre> <p>Si executes el codi que has copiat amb el Processing IDE veuras que nom\u00e9s ix una pantalla de 640 pixels per 480 pixels i res m\u00e9s. No et preocupes, \u00e9s normal. Ara anirem poc a poc afegint el codi necessari per anar construint el nostre joc.</p> Activitat 1. Identificadors del nostre projecte ProblemaSoluci\u00f3 <p>En aquest joc anem a necessitar una s\u00e8rie de variables on emmagatzemarem informaci\u00f3 sobre:</p> <pre><code>1. Posici\u00f3 de la boleta (coordenada X):\n2. Posici\u00f3 de la boleta (coordenada Y):\n3. Velocitat de la boleta (coordenada X):\n4. Velocitat de la boleta (coordenada Y):\n5. Color RGB de la boleta:\n</code></pre> <p>Per a cadascuna de futures variables anteriors tria un identificador seguint les normes de creaci\u00f3 d'identificadors vistes a classe i que siga significatiu.</p> <pre><code>1. Posici\u00f3 de la boleta (coordenada X): posX\n2. Posici\u00f3 de la boleta (coordenada Y): posY\n3. Velocitat de la boleta (coordenada X): velX\n4. Velocitat de la boleta (coordenada Y): velY\n5. Color RGB de la boleta: colorRGB (utilitzarem un tipus especial que es diu **color**)\n</code></pre> <p>Una vegada ja tenim els identificadors escollits ens quedaria posar-los al nostre projecte. \u00c9s a dir, has de declarar les variables associades als identificadors de l'activitat anterior al nostre projecte. Recorda que declarar una variable b\u00e0sicament consisteix en associar-li a l'identificador el tipus de dades adequat.</p> Activitat 2. Declaraci\u00f3 de variables al projecte ProblemaSoluci\u00f3 <p>Llig el que hages respost a l'activitat anterior i declara com consideres dins del bloc de \"Variables Globals\" els identificadors que hages triat com a variables amb el tipus base que trobes que es necessite. Mira l'exemple de la variable velocitat si no saps per on comen\u00e7ar.</p> <pre><code>// Variables Globals\n// Declara les variables a continuaci\u00f3 de l'exemple de velocitat\nint velX;  // Exemple de declaraci\u00f3 d'una variable 'velocitat'\n\nvoid setup () {\nsize(640,480);\n}\nvoid draw () {\nclear();\nbackground(255);\n}\n</code></pre> <p>Recorda que aquesta activitat l'has de fer amb Processing IDE. Guarda el fitxer resultant amb el nom seg\u00fcent: ProjecteBola.pde</p> <p>Descarrega la soluci\u00f3 de l'activitat 2</p>"},{"location":"#operadors-i-expressions","title":"Operadors i expressions","text":"<p>Ja tens les variables necess\u00e0ries per poder comen\u00e7ar amb el projecte declarades al teu fitxer ProjecteBola.pde ara per poder seguir amb el joc, has de donar-los algun valor inicial a les variables declarades a l'activitat anterior. Recorda que per donar valor a una variable s'han d'utilitzar dues coses que has vist al tema 3: l'operador assignaci\u00f3 = i un literal del mateix tipus que siga la variable a la qual vols donar valor.</p> <p>Les assignacions de valors inicials a les variables del nostre projecte es faran dins del setup. Teniu en compte que \u00e9s en aquest m\u00e8tode en el que es solen configurar les aplicacions, per tant, \u00e9s un bon lloc per poder donar-los a les variables el seu valor inicial amb el que comen\u00e7aran quan s'execute l'app.</p> Activitat 3. Inicialitzaci\u00f3 de variables del projecte ProblemaSoluci\u00f3 <p>Com que hem declarat totes les variables a la secci\u00f3 de 'Variables Globals' per tal que se li puga assignar valor des de qualsevol lloc. Ara haur\u00e0s de assignar-li un valor literal a cada identificador declarat com hem vist. Fixa't en l'exemple de posX.</p> <pre><code>// Variables Globals\nint posX, posY;\n\nvoid setup () {\nsize(640,480);\nposX = 320;\n}\nvoid draw () {\nclear();\nbackground(255);\n}\n</code></pre> <p>Guarda aquesta activitat amb el nom de: ProjecteBola.pde</p> <p>Descarrega la soluci\u00f3 de l'activitat 3</p>"},{"location":"#constants","title":"Constants","text":"<p>Com has vist al Tema 3 les constants s\u00f3n identificadors que representen valors immutables durant l'execuci\u00f3 del programa. Trobes que podriem usar alguna constant al nostre projecte?. Mira l'activitat seg\u00fcent:</p> Activitat 4. \u00das de constants al nostre projecte ProblemaSoluci\u00f3 <p>La finalitat del joc de la boleta, a banda de aprendre java, \u00e9s simular les lleis de la gravetat amb una boleta. Dins de les lleis de la gravetat existeix una constant que \u00e9s la for\u00e7a de la gravetat (9,8m/s\u00b2).</p> <p>Declara una constant amb nom 'GRV', o algun altre identificador significatiu i assigna-li el valor de la gravetat. Prova diversos valors de la gravetat fins que trobes aquell que siga m\u00e9s adequat.</p> <pre><code>// Declara la constant a continuaci\u00f3\n\n// Variables globals    \nint posX, posY;\n\nvoid setup () {\nsize(640,480);\nposX = 320;\n}\nvoid draw () {\nclear();\nbackground(255);\n}\n</code></pre> <p>Qu\u00e8 passa si al m\u00e8tode draw intentes canviar-li el valor a alguna constant? Prova-ho.</p> <p>Descarrega la soluci\u00f3 de l'activitat 4</p>"},{"location":"#estructures","title":"Estructures","text":"<p>Abans de continuar amb l'exemple de la boleta anem a refrescar un poc la mem\u00f2ria sobre les fases de desenvolupament de programari que varem veure al primer tema i la t\u00e8cnica de disseny de diagrames de flux i la aplicarem al nostre projecte.</p>"},{"location":"#1-fase-danalisi-o-que-volem-fer","title":"1. Fase d'analisi o qu\u00e8 volem fer","text":"<p>Es pret\u00e9n fer una aplicaci\u00f3 amb una pantalla de grand\u00e0ria 640 p\u00edxels d'ample  i 480 p\u00edxels d'alt amb fons blanc i una boleta de 20 p\u00edxels de diametre al mig de la pantalla en la seua posici\u00f3 inicial. Una vegada arranque l'aplicaci\u00f3 la boleta anir\u00e0 caent aplicant la llei de la gravetat tenint en compte que la seua velocitat inicial \u00e9s zero. Quan arribe al terra, la bola desapareixer\u00e0 i s'acabar\u00e0 el programa.</p> <pre><code>- Requeriment 1: La pantalla de l'aplicaci\u00f3 \u00e9s de 640 p\u00edxels d'ample per 480 p\u00edxels d'alt.\n- Requeriment 2: La posici\u00f3 inicial de la boleta \u00e9s al mig de la pantalla dalt (320,50)\n- Requeriment 3: La velocitat inicial de la boleta \u00e9s zero.\n- Requeriment 4: L'acceleraci\u00f3 de la boleta \u00e9s de 9,8 m/s\u00b2.\n- Requeriment 5: Quan la boleta toque terra anir\u00e0 desapareixent i acabar\u00e0 l'execuci\u00f3 del programa.\n</code></pre>"},{"location":"#2-fase-de-disseny","title":"2. Fase de disseny","text":"<p>Basant-nos en l'especificaci\u00f3 de la fase d'analisi anterior i els requeriments que hem aconseguit treure, dissenyem el nostre algorisme utilitzant, per exemple, la t\u00e8cnica dels diagrames de flux. Un possible resultat podria ser el seg\u00fcent:</p> graph LR     Ini((Inici))--&gt;A[GRV=0.098];     A--&gt;B[Establir Dimensions\\nAmple=640\\nAlt=480];     style Ini fill:#0F0;     B--&gt;C[Establir Posici\u00f3 Inicial\\nposX=320\\nposY=50];     C--&gt;D[Actualitzar Posici\u00f3 Bola];     D--&gt;E[Dibuixar Bola\\n];     E--draw: Bucle Joc--&gt;D;"},{"location":"#3-fase-dimplementacio","title":"3. Fase d'implementaci\u00f3","text":"<p>Ara hem de passar el disseny a codi en Java. Coses a tenir en compte: </p> <pre><code>- Les dimensions de la boleta seran constants o variables?\n- Els identificadors de la posici\u00f3 de la boleta s\u00f3n variables o constants?.\n- La acceleraci\u00f3 \u00e9s una variable o una constant?\n- Com puc dibuixar una boleta amb Processing IDE?\n- Com s'actualitza la posici\u00f3 de la boleta?\n- L'unitat de temps no \u00e9s el segon si no el frame. Com s\u00e9 en quin frame estic a l'actualitat?\n- L'unitat de mesura no s\u00f3n els metres si no el p\u00edxel.\n</code></pre> <p>En realitat, l'\u00fanica q\u00fcesti\u00f3 per a la que possiblement no tingues resposta \u00e9s la cinquena i \u00e9s en aquesta part on realment aplicarem operacions aritm\u00e8tiques per tal d'actualitzar la posici\u00f3 de la boleta. Per saber la posici\u00f3 de la boleta a cada frame utilitzarem les formules del MRUA per calcular la velocitat en tot moment i aix\u00ed poder actualitzar la posici\u00f3. </p> <p>Una \u00faltima consideraci\u00f3 \u00e9s que com que estem fent un simulador simple, no cal ser precisos amb les unitats de mesura i els seus valors, per exemple: la gravetat \u00e9s 9,88 metres per segon cada segon per\u00f2 per al nostre simulador anem a establir que la gravetat (acceleraci\u00f3) \u00e9s de 1 pixel per frame cada frame.</p> Moviment Rectilini Uniformement Accelerat <p>Per tal de fer els c\u00e0lculs m\u00e9s simple i comprensibles, considerem que GRV val 1. Amb les formules del MRUA podem saber en tot moment on es troba la boleta. Si a l'inici la boleta es troba en la posici\u00f3 y=120 i la velocitat inicial a l'eix Y velY=0, passat una unitat de temps (1 frame) la dist\u00e0ncia recorreguda per part de la boleta seria:</p> <pre><code>// Frame 0\nvelY = velY + a*t\nvelY = velY + GRV*(frameCount/frameRate);\nvelY = 0 + 1*0;\nvelY = 0;\nposY = posY + velY = 0;\n</code></pre> <p>\u00c9s a dir, a l'instant zero la boleta es troba en la seua posici\u00f3 inicial i t\u00e9 una velocitat de 0 (pixels/frame). L\u00f2gic no?</p> <pre><code>// Frame 1\nvelY = velY + GRV*(frameCount/frameRate);\nvelY = 0 + 1*(1/60)\nvelY = 1/60;\nposY = posY + velY = 1/60;\n</code></pre> <pre><code>// Frame 2\nvelY = velY + GRV*(frameCount/frameRate);\nvelY = 1/60 + 1*(2/60);\nvelY = 1/60 + 2/60;\nposY = posY + velY = 1/60 + 2/60;\nposY = 3/60;\n</code></pre> <p>\u00c9s a dir, passada una unitat de temps (1 frame) la boleta haur\u00e0 recorregut 3/60 pixels. Continuem:</p> <pre><code>// Frame 3\nvelY = velY + GRV*(frameCount/frameRate);\nvelY = 3/60 + 1*(3/60);\nvelY = 3/60 + 3/60;\nposY = posY + velY = 3/60 + 3/60;\nposY = 6/60\n</code></pre> <p>I ax\u00ed successivament fins que la boleta acabaria desapareixent per la part de baix de la nostra aplicaci\u00f3.</p> <p>En conclusi\u00f3, eixa instrucci\u00f3 del diagrama de flux anterior que hi posa Actualitzar Posici\u00f3 Bola en realitat seria: velY=velY+GRV*(frameCount/frameRate) i posY = posY + velY.</p> <p>Si has llegit i ent\u00e8s l'explicaci\u00f3 anterior sobre el Moviment rectilini uniformement accelerat, fes l'activitat 5 on per primera vegada es veur\u00e0 la boleta en moviment.</p> Activitat 5. Fer caure la boleta ProblemaSoluci\u00f3 <p>Escriu un programa en Java amb Processing IDE en base a les especificacions anteriors i que resolga el problema de la boleta. \u00c9s a dir, que a l'inici el programa dibuixe una boleta a la posici\u00f3 x=320 i y=50 i que com a conseq\u00fc\u00e8ncia de la for\u00e7a de la gravetat vaja caent fins desapareixer de la pantalla de la nostra aplicaci\u00f3.</p> <p>Les variables que determinen la posici\u00f3 i la velocitat de la boleta han de tenir precisi\u00f3 flotant (float) ja que com has pogut observar a l'apartat del moviment rectilini uniformement accelerat, les distintes operacions que s'han de fer utilitzen decimals.</p> <p> </p> <p>CONSIDERACI\u00d3: Penses que la grand\u00e0ria de la boleta podria ser una constant?</p> <p>Descarrega la soluci\u00f3 de l'activitat 5</p> <p>Abans de passar a la seg\u00fcent secci\u00f3, millorem el que ja tenim fet. El que es preten amb aquesta activitat \u00e9s que el punt d'inici de la boleta no siga sempre el mateix i varie cada vegada que s'arranque el joc.  Llig i fes la seg\u00fcent activitat:</p> Activitat 6. Que la boleta  no aparega sempre al mateix lloc ProblemaSoluci\u00f3 <p>En aquesta activitat anem a fer que la boleta no aparega sempre a la posici\u00f3 x=320, y=50 si no que cada vegada que arranquem l'aplicaci\u00f3, aparega en un lloc diferent. </p> <p>Per tal d'aconseguir aquesta aleatorietat, utilitzarem la funci\u00f3 de Processing IDE random. </p> <p>A l'API de Processing, Processing Reference, entre altres tenim una funci\u00f3 random(low, high) que genera nombres aleatoris dintre del rang low-hight que se li passa per par\u00e0metre, \u00e9s a dir, si volem que aquesta funci\u00f3 ens torne un valor aleatori entre 0 i 100, haur\u00edem de cridar-la de la seg\u00fcent forma:</p> <pre><code>float f = random(100);   // Genera un nombre aleatori entre 0 i 100 i l'emmagatzema a f\nfloat m = random(50,90); // Genera un nombre aleatori entre 50 i 90 i l'emmagatzema a m\n</code></pre> <p>Primer fes que tant les variables que determinen la posici\u00f3 x i y de la boleta les genere la funci\u00f3 random i no siguen fixes.</p> <pre><code>// Per exemple\nposX = random(640);\n</code></pre> <p>Tamb\u00e9 fes que la gravetat tamb\u00e9 tinga major precisi\u00f3 i assigna-li un valor de 0.0098.</p> <p>Si executes prou vegades l'activitat 6 t'adonar\u00e0s que de vegades la boleta apareix en els extrems de la pantalla i de vegades tant baixeta que no s'arriba a apreciar el seu comportament. Investiga la funci\u00f3 random de Processing API i fes que la boleta aparega sempre entre els seg\u00fcents rangs:</p> <ul> <li>posX entre 100 i 540</li> <li>posY entre 50 i 150</li> </ul> <p>Descarrega la soluci\u00f3 de l'activitat 6</p>"},{"location":"#estructura-de-seleccio-simple","title":"Estructura de selecci\u00f3 simple","text":"<p>Fent \u00fas de les estructures de selecci\u00f3 vistes al tema 3, farem que el nostre joc siga m\u00e9s eficient i prec\u00eds. Si has fet les activitats anteriors haur\u00e0s pogut observar que la boleta desapareix per la part de baix de la nostra aplicaci\u00f3 i no la tornem a veure. Anem a corregir este comportament utilitzant una estructura de selecci\u00f3 if</p> <p>Continuem amb la boleta i ampliem funcionalitats i millorem el diagrama de flux de la fase de disseny</p> graph LR     Ini((Inici))--&gt;A[GRV=0.098f];     A--&gt;B[Establir Dimensions\\nAmple=640\\nAlt=480];     style Ini fill:#0F0;       B--&gt;C[Establir Posici\u00f3 Inicial\\nposX=random xMin-xMax\\nposY=random yMin-yMax];     C--&gt;E[Actualitzar Posici\u00f3 Bola\\nvelY=velY+GRV*frameCount/frameRate\\nposY=posY+velY];     E--&gt;F{Ha desaparegut?};     F--&gt;|SI|G[posX=0];     G--&gt;H[velY = 0];     H--&gt;D;     F--&gt;|NO|D;             D[Dibuixar Bola];     D--Draw: Bucle Joc--&gt;E;  <p>El primer que farem en aquesta secci\u00f3 \u00e9s que la boleta no desaparega. Fins ara la nostra boleta apareix en un lloc random de la finestra de l'aplicaci\u00f3 i comen\u00e7a a caure fins que desapareix. Hem d'evitar aix\u00f2 com mostra el diagrama de flux.</p> Activitat 7. Que no desaparega la boleta ProblemaSoluci\u00f3 <p>Hem d'aconseguir que la boleta torne a apareixer per dalt quan arribe desaparega per la part de baix de l'aplicaci\u00f3. Qu\u00e8 significa que la boleta ha desaparegut per baix? o dit d'una altra manera, com sabem que la boleta ha desaparegut per complet? Per qu\u00e8 la el valor de la variable que indica la posici\u00f3 a l'eix Y posY de la boleta \u00e9s major que l'alt de la nostra aplicaci\u00f3 m\u00e9s la meitat de la grand\u00e0ria de la boleta, \u00e9s a dir: 495. Per tant podem deduir que: \"Si la posici\u00f3 Y de la boleta \u00e9s major que 495 aleshores la fem apareixer per dalt...\"</p> <p>Com podeu observar, l'afirmaci\u00f3 anterior \u00e9s un if, si posY \u00e9s major (&gt;) altura aleshores fes apareixer per dalt de nou la boleta. Per\u00f2 quines s\u00f3n les accions a realitzar per tal que la boleta aparega per dalt? tornar a posar la posici\u00f3 Y de la boleta a 0 menys la meitat de la seua grand\u00e0ria (TAM).</p> <p>Tamb\u00e9 s'ha de reiniciar la velocitat a zero sino no parar\u00e0 d'accelerar.</p> <p>Comprovaci\u00f3: Qu\u00e8 passa si canvies el valor de TAM a 50? Funciona com hauria de funcionar?</p> <p><pre><code>    // Constants\nfinal static float GRV = 0.098f; // For\u00e7a de la gravetat\nfinal static int   TAM = 30;     // Grand\u00e0ria de la boleta\n\n// Variables Globals\nfloat velX, velY;             // Velocitat inicial de l'objecte quan arranquem el programa.\nfloat posX, posY;             // Variables que determinen la posici\u00f3 de la boleta en un escenari de dues dimensions\n\n// M\u00e8tode setup: inicialitza la nostra aplicaci\u00f3, dona valors inicials.\nvoid setup () {\nsize(640,480);               // Establir dimensions\nposX      = random(40,600);  // Establim posici\u00f3 X inicial\nposY      = random(40,440);  // Establim posici\u00f3 Y inicial\nvelX      = 0;               // Establim la velocitat X inicial\nvelY      = 0;               // Establim la velocitat Y inicial\n}\n\n// Metode draw: bucle del joc, aquest m\u00e8tode s'executa de forma continua\nvoid draw () {\nclear();\nbackground(255);\n\n// Actualitzem la posici\u00f3 utilitzant la velocitat \nvelY = velY + GRV*(frameCount/frameRate);  // Vf = Vo + acc*temps;\nposY = posY + velY;\n\n// Codi if que controle si ha arribat al terra o no.\n// if...\n\n// Dibuixem la boleta\nfill(0);\ncircle(posX,posY,TAM);\n}\n</code></pre> </p> <p>Descarrega la soluci\u00f3 de l'activitat 7</p>"},{"location":"#el-depurador-de-processing-ide","title":"El depurador de Processing IDE","text":"<p>Ha arribat el moment que aprengues com funciona el depurador que \u00e9s una eina molt important per a desenvolupar codi. El depurador o debugger \u00e9s una eina molt important i necess\u00e0ria que porten tots els entorns de desenvolupament integrat com Processing. Aquesta eina ens permet executar el codi pas a pas al mateix temps que podem monitoritzar el valor de les variables, l'estat dels diferent objectes que formen part de la nostra aplicaci\u00f3. </p> <p> </p> <p>Per poder activar el depurador hem de fer clic al bot\u00f3 red\u00f3 que es troba dalt a la dreta de l'editor com es mostra a la imatge anterior. Una vegada tenim el depurador activat, se'ns obre el monitor de variables que ens permetr\u00e0 controlar com canvien les variables de valor. </p> <p>A la part esquerra ens apareixeran els controls que ens habilitaran per poder navegar pas a pas o entrar en funcions i m\u00e8todes del codi.</p> <p>Finalment \u00e9s molt important tamb\u00e9 per a la depuraci\u00f3 de codi el terme breakpoint per fer que el depurador pare en un lloc espec\u00edfic del nostre codi, li ho hem d'indicar amb punts de ruptura o breakpoints. Per poder posar un breakpoint nom\u00e9s hem de fer clic sobre el n\u00famero de la l\u00ednia sobre la que volem que s'apare l'execuci\u00f3 del programa.  Per tal de llevar-lo tornem a punxar sobre la mateixa l\u00ednia.</p> <p>Una vegada hages provat el depurador de Processing IDE i tingues m\u00e9s o menys clar com funciona, fes l'activitat seg\u00fcent.</p> Activitat 8. Correcci\u00f3 d'errades amb el depurador ProblemaSoluci\u00f3 <p>Com haur\u00e0s vist quan has executat el codi, el comportament del que fa el nostre codi amb la boleta no \u00e9s el que esperavem, o almenys jo ho imaginava d'una altra manera. </p> <p>Dona la sensaci\u00f3 que cada vegada que la boleta apareix a la part de dalt de la pantalla de l'aplicaci\u00f3, va cada vegada m\u00e9s de pressa. Per qu\u00e8?</p> <p>Revisa el codi, troba on est\u00e0 el problema i fes els canvis necessaris. Per facilitar la tasca, fes una depuraci\u00f3 l\u00ednia a l\u00ednia del codi amb el Debugger de Processing IDE i deixa l'aplicaci\u00f3 com a tu t'agradaria.</p> <p>Pista: igual quan torna a apareixer per dalt el temps es deuria resetejar a 0 i comen\u00e7ar de zero. Ho est\u00e0 fent aix\u00ed? Com ho podries canviar?</p> <p>Descarrega la soluci\u00f3 de l'activitat 8</p>"},{"location":"#estructura-de-seleccio-doble","title":"Estructura de selecci\u00f3 doble","text":"<p>Per tal de treballar l'estructura condicional doble que acabem de veure ampliarem les funcionalitats de la nostra aplicaci\u00f3. Ara volem que quan la boleta comence de tocar terra es pinte de color roig i redueixca la seua velocitat en l'eix y en un 50%. Quan no estiga tocant terra, que siga de color negre. Has de tindre en compte que la boleta es dibuixa a partir del seu center (posX, posY) i que per tant la boleta comen\u00e7ar\u00e0 a tocar terra quan la dist\u00e0ncia que hi ha entre el centre de la boleta i terra siga menor o igual que l'altura de la nostra aplicaci\u00f3 m\u00e9s la meitat de la seua grand\u00e0ria.</p> <p>El diagrama de flux amb els nous requeriments quedaria aix\u00ed:</p> graph LR     Ini((Inici))--&gt;A[GRV=0.98f];     style Ini fill:#0F0;     A--&gt;B[Establir Dimensions\\nAmple=640\\nAlt=480];     B--&gt;C[Establir Posici\u00f3 Inicial\\nposX=random xMin, xMax\\nposY=random yMin, yMax];     C--&gt;D[Actualitzar Posici\u00f3 Bola\\nvevY=velY + GRV*frameCount/frameRate\\nposY=posY+velY];     D--&gt;F{Ha tocat terra?};     F--&gt;|SI|G[PintaRoig\\nFrena Boleta];     F--&gt;|NO|H[PintaNegre];     G--&gt;P1(fa:fa-spinner);     H--&gt;P1;     P1--&gt;I{Ha desaparegut?};     I--&gt;|SI|J[velY=0\\nposY=-TAM/2\\nframeCount=0];     J--&gt;K[Dibuixar Bola];     K--Draw: bucle joc--&gt;D;  <p>Estudia amb detall el diagrama de flux anterior i fes la seg\u00fcent activitat.</p> Activitat 9. Boleta de dos colors ProblemaSoluci\u00f3 <p>Observa el diagrama de flux anterior i modifica el codi de que ja tens per tal d'afegir-li les noves funcionalitats. La dist\u00e0ncia a partir de la qual la boleta es faria roja \u00e9s quan comen\u00e7a a tocar terra i per una altra banda has de comprovar tamb\u00e9 quan ha desaparegut completament. Concretament en el teu codi deuries tindre: una estructura de selecci\u00f3  simple (la de l'activitat anterior) i una altra doble, la nova funcionalitat. Finalment l'aplicaci\u00f3 quedaria de la seg\u00fcent forma:</p> <p> </p> <p>Algunes consideracions: has de canviar el tipus de posX i posY a float per augmentar la precisi\u00f3.</p> <p>Descarrega la soluci\u00f3 de l'activitat 9</p>"},{"location":"#estructura-de-seleccio-niada","title":"Estructura de selecci\u00f3 niada","text":"<p>Com recordar\u00e0s el que hem donat al tema 3, l'estructura de selecci\u00f3 niada \u00e9s una estructura de programaci\u00f3 en la que poden haver m\u00e9s d'una condici\u00f3. A l'activitat anterior teniem dues condicions: desapareixer i tocar terr\u00e0, en canvi no hem utilitzat l'estructura de selecci\u00f3 niada. Modifica el codi anterior i converteix una estructura simple i una doble en una estructura \u00fanica estructura de selecci\u00f3 niada com mostra el seg\u00fcent diagrama de flux.</p> graph LR     Ini((Inici))--&gt;A[GRV=0.98f];     style Ini fill:#0F0;     A--&gt;B[Establir Dimensions\\nAmple=640\\nAlt=480];     B--&gt;C[Establir Posici\u00f3 Inicial\\nposX=random Xmin, Xmax \\nposY=random Ymin, Ymax];     C--&gt;D[Actualitzar Posici\u00f3 Bola\\nvevY=velY+GRV*frameCount/frameRate\\nposY=posY+velY];     D--&gt;F{Ha tocat terra\\ni NO\\nha desaparegut?};     F--&gt;|SI|G[PintaRoig\\nFrena Boleta];     G--&gt;K;     F--&gt;|NO|H{Ha desaparegut?};     H--&gt;|SI|I[velY=0\\nposY=-TAM/2\\nframeCount=0];     I--&gt;K;     H--&gt;|NO|J[PintaNegre];     J--&gt;K[Dibuixar Bola];     K--Draw: bucle joc--&gt;D;  Activitat 10. Modifica el codi anterior ProblemaSoluci\u00f3 <p>Observa el diagrama de flux anterior i modifica el codi de l'activitat 9 per tal que en lloc de tindre dues estructures condicionals en tinga una niada.</p> <p>Ampliaci\u00f3: Fes que la boleta canvie de color segons l'altura en la que es trobe, per exemple: els primers 50 pixels que siga negra, els seg\u00fcents siga taronja, a partir del pixel 100 i fins el 150 groga, i aix\u00ed successivament sempre sense modificar el comportament anterior.</p> <p>Has d'entregar dos fitxers en aquesta activitat: Activitat10.pde i Activitat10Ampliada.pde</p> <p>Descarrega la soluci\u00f3 de l'activitat 10</p>"},{"location":"#estructura-de-seleccio-multiple","title":"Estructura de selecci\u00f3 m\u00faltiple","text":"<p>Treballem a continuaci\u00f3 l'estructura de selecci\u00f3 m\u00faltiple: switch case. Per poder treballar amb el switch li afegirem alguna funcionalitat nova al nostre joc. Es tracta de poder interaccionar amb la boleta, \u00e9s a dir, es pret\u00e9n que quan premem al teclat algun cursor (dalt, baix, esquerra, dreta) la boleta es menege en eixa direcci\u00f3 o se li done alguna classe d'impuls cap a eixa direcci\u00f3 concreta.</p> <p>Per poder aconseguir aix\u00f2 hem d'usar un esdeveniment que ens ofereix la llibreria de Processing IDE. Aquest esdeveniment es diu keyPressed i ve en forma de funci\u00f3 en la que podem escriure tot el codi que necessite.</p> <p>Abans de passar a fer l'activitat 11, entra al Reference de Processing IDE, investiga b\u00e9 qu\u00e8 \u00e9s aix\u00f2 del keyPressed, com funciona i quines coses es podrien fer.</p> Algunes consideracions <p>Abans de programar el codi necessari per controlar el moviment de la boleta a la seg\u00fcent activitat, has de fer-te lse seg\u00fcents q\u00fcestions:</p> <ol> <li>Qu\u00e8 pense que passar\u00e0 si prem un cursor qualsevol (amunt, avall, dreta o esquerra)?</li> <li>Si vull que la boleta no pare de moure's, he de deixar el bot\u00f3 pres?</li> <li>Si prem el bot\u00f3 dret nom\u00e9s una vegada, es mour\u00e0 nom\u00e9s durant un frame o continuar\u00e0 movent-se mentre no li indique el contrari?</li> <li>Puc parar la boleta? Com ho faria?</li> </ol> <p>Per continuar amb el projecte de la boleta, canviarem un poc el diagrama de flux. Com pots observar a continuaci\u00f3, la gravetat ja no existeix, ara la boleta apareixer\u00e0 al mig de la pantalla de la nostra aplicaci\u00f3 i no comen\u00e7ar\u00e0 a moure's fins que premem algun cursor del teclat seguint la l\u00f2gica del joc de la serp.</p> <p>Per tal de poder implementar aquest tipus de moviment, necessitem de dues variables m\u00e9s que ens indiquen en quina direcci\u00f3 est\u00e0 anant la nostra boleta. Mira la taula seg\u00fcent.</p> dirX dirY On Va 0 0 Parat 0 -1 Avall 0 1 Amunt 1 0 Dreta -1 0 Esquerra <p>D'altra banda el que abans era la velocitat, un vector de dues coordenades, passa a ser una magnitud entera, \u00e9s a dir, nom\u00e9s un sol valor.</p> graph LR     Ini((Inici))--&gt;A[Establir Dimensions\\nAmple=640\\nAlt=480\\nEstablir Posici\u00f3 \\nposX=320\\nposY=240\\nEstablir Direcci\u00f3\\ndirX=0\\ndirY=0\\bEstablir velocitat\\nvel=3];     style Ini fill:#0F0;         A--&gt;B[Actualitzar Posici\u00f3\\nposX+=dirX*vel\\nposY+=dirY*vel];     B--&gt;C[Dibuixar Bola];     C--&gt;D{Tecla apretada?};     D--&gt;|NO|C;     D--&gt;|SI|E{Esdeveniment\\nkeyPressed};     E--&gt;|UP|F[Amunt\\ndirX=0\\ndirY=-1];     E--&gt;|DOWN|G[Avall\\ndirX=0\\ndirY=1];     E--&gt;|LEFT|H[Esquerra\\ndirX=-1\\ndirY=0];     E--&gt;|RIGHT|I[Dreta\\ndirX=1\\ndirY=0];     F--&gt;J(fa:fa-spinner);     G--&gt;J;     H--&gt;J;     I--&gt;J;     J--Draw: bucle joc--&gt;C;  Activitat 11. Boleta amb cursors ProblemaSoluci\u00f3 <p>A partir de l'activitat 9 li donarem interactivitat amb l'usuari a la nostra boleta.</p> <p>Per fer la base del nostre joc, seguirem la l\u00f2gica del joc de la serp com ja he comentat abans. Aquell joc en que una serp persegueix boletes que apareixen aleat\u00f2riament a la pantalla i conforme \"se les menja\" va creixent augmentant la dificultat (ja veurem com).</p> <p>Completa el seg\u00fcent codi per tal que quan premem un cursor del nostre teclat, la boleta comence a menejar-se en eixa direcci\u00f3. A l'inici de l'aplicaci\u00f3, la boleta estar\u00e0 parada.</p> <p><pre><code>// Variables globals\nfloat posX, posY, vel;\nint dirX, dirY; // Compte que ac\u00ed hem afegit les variables dirX i dirY \n// necess\u00e0ries per indicar en quina direcci\u00f3 va la boleta\n\n\n// Configuraci\u00f3 de l'aplicaci\u00f3 (nom\u00e9s s'executa una vegada al principi)\nvoid setup () {\nsize(640,480);  // Grand\u00e0ria de monitor est\u00e0ndard VGA\nposX = 320;\nposY = 50;\ndirX = 0;\ndirY = 0;\nvel  = 3;\n}\n\nvoid draw () {\nclear();\nbackground(255);\nellipse(posX, posY, 30, 30);\n}\n\nvoid keyPressed() {\nswitch (keyCode) {\ncase UP:\n// Ac\u00ed anir\u00e0 el codi per que la boleta es menege cap amunt\nbreak;\n\ncase DOWN:\n// Ac\u00ed anir\u00e0 el codi per que la boleta vaja cap avall.\nbreak;\n\ncase LEFT:\n// Codi per moure la boleta cap a l'esquerra.\nbreak;\n\ncase RIGHT:\n// Codi per moure la boleta cap a la dreta.\nbreak;\n}\n}\n</code></pre> </p> <p>Descarrega la soluci\u00f3 de l'activitat 11</p>"},{"location":"#programacio-modular","title":"Programaci\u00f3 Modular","text":"<p>Com has pogut observar en els diagrames de flux que hem anat fent al nostre projecte, va augmentant en complexitat i cada vegada s\u00f3n m\u00e9s dif\u00edcils de interpretar. Ha arribat l'hora de modularitzar el nostre joc.</p> <p>Basant-nos en el diagrama de flux anterior observa el seg\u00fcent diagrama simplificat.</p> graph LR     Ini((Inici))--&gt;A[Inicialitzar App];     style Ini fill:#0F0;     A--&gt;B[Actualitzar Boleta];     B--&gt;C[Dibuixar Bola];     C--&gt;D[Comprovar Pulsacions\\nkeyPressed];     D--Draw: bucle joc--&gt;C;      <p>Com pots observar, hem simplificat molt el diagrama anterior per\u00f2 hauria de continuar funcionant igualment. El que hem fet ha sigut substituir els conjunts d'instruccions del diagrama anterior per funcionalitats m\u00e9s gen\u00e8riques. Aix\u00ed:</p> <p>1. Inicialitzar App: s'encarregar\u00e0 de establir dimensions, establir la posici\u00f3 i la direcci\u00f3 inicial de la boleta. 2. Actualitzar Boleta: s'encarregar\u00e0 de en base als valors que tinguen dirX, dirY i velocitat de modificar els valors de posX i posY com hem vist en activitats anteriors. 3. Dibuixar boleta: s'encarregar\u00e0 de dibuixar la boleta al lloc de l'aplicaci\u00f3 que li corresponga. 4. Comprovar pulsacions: s'encarregar\u00e0 de gestionar els esdeveniments de teclats. B\u00e0sicament seria *keyPressed.</p> Activitat 12. Modularitza el codi del projecte ProblemaSoluci\u00f3 <p>Seguint a partir del codi que hem desenvolupat a l'activitat 11, has de modularitzar el codi creant les seg\u00fcents funcions: inicialitzarJoc, actualitzarPosicio, dibuixar.</p> <p>De moment la funcionalitat de comprovar pulsacions s'encarregar\u00e0 el m\u00e8tode de l'API de Processing keyPressed.</p> <p>Descarrega la soluci\u00f3 de l'activitat 11</p>"},{"location":"#parametres","title":"Par\u00e0metres","text":"<p>Com hem vist al tema 4, les funcions en programaci\u00f3 permeten la seua parametritzaci\u00f3, \u00e9s a dir, poder condicionar el funcionament dels m\u00e8todes mitjan\u00e7ant l'\u00fas de par\u00e0metres i arguments. La q\u00fcesti\u00f3 \u00e9s si podem o no utilitzar aquesta caracter\u00edstica de la programaci\u00f3 modular a la nostra aplicaci\u00f3. </p> <p>Normalment la parametritzaci\u00f3 de m\u00e8todes serveix entre altres coses per evitar l'\u00fas de les variables globals que a la llarga solen portar problemes.  En el nostre cas de moment algunes variables com les de posici\u00f3 i direcci\u00f3 de la boleta no podem evitar que siguen globals, per\u00f2 hi ha altres que igual seria convenient que no ho foren.</p> <p>Llig i fes l'activitat 13.</p> Activitat 13. Parametritzaci\u00f3 de funcions ProblemaSoluci\u00f3 <p>Revisa el codi que has escrit a l'activitat 12 de modularitzaci\u00f3 i raona el seg\u00fcent. Hi ha algun m\u00e8tode dels que he has escrit que siga susceptible de ser parametritzat?</p> <p>Reescriu el codi parametritzant les funcions que consideres necess\u00e0ries i raona el motiu en els comentaris de documentaci\u00f3 al codi.</p> <p>Descarrega la soluci\u00f3 de l'activitat 13</p>"},{"location":"#pas-dobjectes-a-funcions","title":"Pas d'objectes a funcions","text":"<p>Un dels apartats que hem vist al tema de programaci\u00f3 modular \u00e9s l'\u00fas d'objectes i funcions. Com que nosaltres encara no hem entrat en Programaci\u00f3 Orientada a Objectes no entrarem massa en detall del que \u00e9s una classe, un objecte i/o una inst\u00e0ncia per\u00f2 s\u00ed que ens introduirem un poc en el m\u00f3n dels objectes.</p> <p>Anem a utilitzar l'objecte PVector que ens proporciona l'API de Processing per treballar amb vectors de coordenades. </p> <p>Llig l'article PVector de la guia de Processing IDE i despr\u00e9s fes la seg\u00fcent activitat.</p> <p>Has de tenir en compte que encara que els vectors de posici\u00f3 i direcci\u00f3 siguen variables globals, s'haurien de passar per par\u00e0metre a aquells m\u00e8todes que ho necessiten.</p> Activitat 14. \u00das d'objectes i funcions ProblemaSoluci\u00f3 <p>Com haur\u00e0s llegit a l'article PVector \u00e9s una classe que s'utilitza  per representar vectors de dos o tres dimensions. En el nostre cas necessitariem fer \u00fas del vector de dues dimensions per raons obvies.</p> <p>Hauries de declarar dos PVectors, un per la posici\u00f3 de la boleta i un altre per a la direcci\u00f3 de la boleta.</p> <pre><code>// Exemple de com es declara un objecte de la classe PVector\nPVector nomVector;\n\n// Exemple de com s'inicia un objecte de la classe PVector\nnomVector = new PVector(a,b);  // On 'a' i 'b' s\u00f3n els valors que s'assignaran a la coordenada x i y respectivament.\n\n// Tamb\u00e9 es podria declarar un vector buit i assignar-li les coordenades a posteriori\nnomVector = new PVector();\nnomVector.x = a;\nnomVector.y = b;\n</code></pre> <p>Descarrega la soluci\u00f3 de l'activitat 14</p>"},{"location":"#sobre-el-return","title":"Sobre el return","text":"<p>Si has arribat a aquest punt, segurament t'haur\u00e0s donat compte que la boleta quan arriba a algun dels extrems de la pantalla: dalt, baix, esquerra o dreta; la boleta desapareix i no torna a apareixer a no ser que li canviem la direcci\u00f3 i posem la contraria que tenia quan ha desaparegut.</p> <p>Per tal de solucionar aquest problema crearem un m\u00e8tode superaLimits que s'encarregar\u00e0 per a cada frame de comprovar si la boleta ha superat algun dels l\u00edmits del nostre joc. Aquest m\u00e8tode b\u00e0sicament far\u00e0 el seg\u00fcent:</p> graph LR     Ini((Inici))--&gt;A{Supera\\nl\u00edmit superior?};     style Ini fill:#0F0;     A--&gt;|SI|B[return true];     A--&gt;|NO|C{Supera\\nl\u00edmit inferior?};     C--&gt;|SI|B;     C--&gt;|NO|D{Supera\\nl\u00edmit esquerre?};     D--&gt;|SI|B;     D--&gt;|NO|E{Supera\\nl\u00edmit dret?};     E--&gt;|SI|B;     E--&gt;|NO|F[return false];     F--&gt;Fin((Fi));     style Fin fill:#F00;     B--&gt;Fin;  <p>Finalment nom\u00e9s ens quedaria saber que fer quan la boleta a arribat algun dels l\u00edmits de la pantalla. S'hauria de parar? Hauria de rebotar? En cas de rebotar, en quina direcci\u00f3 ho faria? Des del meu punt de vista i amb la idea de joc que es preten fer, si la boleta toca un l\u00edmit, haur\u00e0 de rebotar en direcci\u00f3 contraria.  Per exemple, si la boleta va en direcci\u00f3 dreta (dirX=1, dirY=0) hauria de rebotar cap a l'esquerra (dirX=-1, dirY=0). Si pel contrari, la boleta va cap avall (dirX=0, dirY=1) passar\u00e0 a anar cap amunt (dirX=0, dirY=-1).  Com pots observar, rebotar significa multiplicar per menys \u00fa la direcci\u00f3 actual de la boleta, per tant podem concloure que el diagrama de flux final d'aquesta activitat quedaria de la seg\u00fcent forma.</p> graph LR     Ini((Inici))--&gt;A[Inicialitzar App];     style Ini fill:#0F0;     A--&gt;B[Actualitzar Boleta];     B--&gt;C[Dibuixar Bola];     C--&gt;D[Comprovar Pulsacions\\nkeyPressed];     D--&gt;E{SuperaLimit?}     E--&gt;|Si|F[Rebota];     E--&gt;|No|B;     F--&gt;B;   <p>El que s\u00ed est\u00e0 clar \u00e9s que la funci\u00f3 ha de tornar un valor boole\u00e0 que ens indique si la boleta ha superat algun marge (true) o no (false)</p> Activitat 15. Detecci\u00f3 de vores ProblemaSoluci\u00f3 <p>Seguint el exemple que hem posat al diagrama de flux anterior, dissenya una funci\u00f3 que es podria dir superaLimits que ens retorne un valor true en cas que la boleta desaparega per algun l\u00edmit i false en cas contrari.</p> <p>En el bucle de joc haur\u00e0s de cridar a dita funci\u00f3 per comprovar a cada frame si la boleta toca o no algun l\u00edmit de l'aplicaci\u00f3. Al mateix temps segons la resposta (true o false) que ens done la crida al m\u00e8tode superaLimits haurem de prendre la decisi\u00f3 de qu\u00e8 fem amb ella: parar, rebotar..</p> <p>Segueix el diagrama de flux anterior i implementa l'activitat.</p> <p> </p> <p>Descarrega la soluci\u00f3 de l'activitat 15</p>"},{"location":"#tipus-compostos-de-dades","title":"Tipus Compostos de Dades","text":"<p>Aprofitant el que hem vist al tema de tipus compostos de dades, veiem com podem afegir-li m\u00e9s funcionalitats al nostre projecte de la boleta.</p> <p>Com que ja podem moure la boleta per la pantalla de la nostra aplicaci\u00f3 amb els cursors, donem-li un objectiu al nostre personatge. Farem que la finalitat del joc siga que la nostra boleta persegueixi i es \"menge\" enemics. </p> <p>Suposem que aquestos enemics s\u00f3n cercles d'un color diferent al de la boleta que apareixen de forma aleat\u00f2ria per la pantalla i es mantenen en la mateixa posici\u00f3 durant tot el joc, a m\u00e9s a m\u00e9s, en el moment que apareixen la boleta els ha de tocar per poder eliminar-los. Podriem fer, per exemple, que els enemics comencen a apareixer passat un temps i que vagen apareixent fins arribar a un m\u00e0xim de 10 enemics en total. </p> <p>El joc acaba quan la boleta s'haja \"menjat\" a tots els enemics.</p> <p>Analitzem amb m\u00e9s profunditat el plantejament anterior i vegem quins podrien ser els seus requeriments. </p>"},{"location":"#requeriments","title":"Requeriments","text":"<pre><code>1. Hem de guardar informaci\u00f3 sobre la posici\u00f3 dels enemics.\n2. Els enemics apareixen de forma aleat\u00f2ria a la pantalla cada cert temps en una posici\u00f3 aleat\u00f2ria.\n3. Els enemics s\u00f3n est\u00e0tics. No es poden moure i mantenen sempre la mateixa posici\u00f3.\n4. Hi haur\u00e0 un m\u00e0xim de 10 enemics de forma simult\u00e0nia al nostre joc.\n5. Per \"menjar-se\" un enemic, la boleta haur\u00e0 de **col\u00b7lisionar** amb l'enemic.\n6. El joc finalitza quan la boleta s'ha menjat a tots els enemics.\n</code></pre> <p>D'alguna manera hem de poder guardar la informaci\u00f3 necess\u00e0ria d'un conjunt d'enemics al nostre programa. Sembla l\u00f2gic que usarem un array d'una dimensi\u00f3 per aquesta tasca, per\u00f2 quin tipus de dades ha de guardar aquest array. Si ho penses b\u00e9 dels enemics nom\u00e9s necessitem saber-ne la posici\u00f3 en la que es troben, \u00e9s a dir, podriem usar un array de PVectors.</p>"},{"location":"#diagrama-de-flux","title":"Diagrama de flux","text":"<p>Veiem a continuaci\u00f3 un possible disseny de les ampliacions de funcionalitats del nostre joc al diagrama de flux</p> graph LR     Ini((Inici))--&gt;A[Inicialitzar App];     style Ini fill:#0F0;     A--&gt;B[Actualitzar Boleta];     B--&gt;C[Actualitzar Enemics];     C--&gt;D[Dibuixar Boleta];     D--&gt;E[Dibuixar Enemics];     E--&gt;F[Comprovar col\u00b7lisions];     F--&gt;G[\"Comprovar pulsacions\\n(keyPressed)\"];     G--&gt;H{Queden enemics?};     H--&gt;|Si|I{Supera Limit?};     H--&gt;|No|J[Finalitzar Joc];     I--&gt;|Si|K[Rebota];     I--&gt;|No|B;         J--&gt;Fi((Fi));     style Fi fill:#F00;     K--&gt;B;   <p>Com es pot observar al diagrama de flux anterior hi han poques difer\u00e8ncies amb el que haviem fet a l'activitat 15. Apareixen les seg\u00fcents novetats: </p> <ul> <li>Instruccions:  Actualitzar enemics, Dibuixar enemics, Comprovar col\u00b7lisions, Finalitzar Joc.</li> <li>Condicions:  Queden enemics?</li> </ul> <p>En realitat, com ja haur\u00e0s imaginat, eixes noves instruccions en realitat s\u00f3n m\u00e8todes nous del nostre joc. Expliquem-los amb m\u00e9s detall:</p> <p>1. Actualitzar enemics: aquest m\u00e8tode, igual que feiem amb la boleta, actualitza la posici\u00f3 de l'enemic, \u00e9s a dir, quan aquest apareix li assigna una posici\u00f3 aleat\u00f2ria que \u00e9s la que mantindr\u00e0 durant tot el joc fins que se'l mengen. A banda d'a\u00e7\u00f2, Actualitzar enemics tamb\u00e9 haur\u00e0 de gestionar si han d'apareixer o no nous enemics o ja estan tots i tamb\u00e9 controlar l'interval de temps entre que aparega un enemic i el seg\u00fcent. \u00c9s a dir, ha de controlar a partir de quan apareix el primer enemic i tamb\u00e9 com successivament van apareixent la resta.</p> <p>2. Dibuixar enemics: aquest m\u00e8tode haur\u00e0 de rec\u00f3rrer l'array amb les posicions dels enemics, en cas d'haver-ne alguna, i dibuixar els cercles (enemics) corresponents. </p> <p>3. Comprovar col\u00b7lisions: aquest \u00e9s possiblement el m\u00e8tode m\u00e9s complex. A cada cicle del bucle del joc s'haur\u00e0 de comprovar si la nostra boleta, com a conseq\u00fc\u00e8ncia de la seua nova posici\u00f3 una vegada ja s'ha actualitzat, est\u00e0 col\u00b7lisionant amb algun enemic. Per saber si la boleta est\u00e0 col\u00b7lisionant amb algun enemic es pot saber de la seg\u00fcent manera: si la dist\u00e0ncia entre la posici\u00f3 de la boleta i la posici\u00f3 de l'enemic \u00e9s menor que la suma del radi de la boleta i el de l'enemic, significa que s'estan tocant i per tant s'hauria d'eliminar l'enemic.  Per poder realitzar aquestos c\u00e0lculs pots aprofitar les funcionalitats que ens ofereix el PVector de l'API de Processing. </p> <p>4. Queden enemics: en aquesta condici\u00f3 s'ha de comprovar si ja hem menjat a tots els enemics i en aquest cas finalitzariem el joc. Compte que fins que no apareix el primer enemic es podria pensar que ja no queden enemics i finalitzar el joc sense haver-lo comen\u00e7at. Has de dissenyar b\u00e9 aquest m\u00e8tode per tal que aix\u00f2 no passe.</p> <p>5. Finalitzar joc: \u00e9s un m\u00e8tode que s'encarregaria de fer veure a l'usuari que la partida ja ha finalitzat, \u00e9s a dir, el t\u00edpic Gave Over.</p> <p>Alguns dubtes que potser t'estar\u00e0s preguntant:</p> <ul> <li>Com guarde informaci\u00f3 de la posici\u00f3 dels enemics? Has d'utilitzar un array de PVectors com s'ha comentat abans amb capacitat per a 10 elements. Cadascun d'aquestos PVectors tindran la informaci\u00f3 de la posici\u00f3 d'un enemic. En cas que aquest siga null significaria que encara no ha aparegut.</li> <li>En quin moment comence a mostrar enemics? Has de portar un control del temps, una bona manera pot ser utilitzar la variable frameCount de Processing per\u00f2 tamb\u00e9 hi ha altres alternatives com les funcions de temps de l'API de Processing. Per exemple, cada 60 frames podries considerar que ha passat un segon, encara que no seria massa prec\u00eds. Mira les funcions de temps que ens permet usar Processing perqu\u00e8 es pot utilitzar tamb\u00e9 m\u00e9s endavant per fer un comptador de temps. Per exemple imagina que l'interval en el que apareixen els enemics \u00e9s de 200 frames o de 5 segons, el primer enemic apareixeria passats 200 frames o 5 segons des de l'inici de l'aplicaci\u00f3. Una vegada a aparegut el primer enemic esperaria uns altres 200 frames o 5 segons per mostrar el seg\u00fcent i aix\u00ed successivament.</li> <li>Com se si han aparegut o no? Com que tens un arrray de PVectors que t'indica la posici\u00f3 de tots els enemics, \u00e9s f\u00e0cil deduir que si el contingut en la posici\u00f3 2 de l'array \u00e9s nul\u00b7la significa que encara no ha aparegut.</li> <li>Com s'eliminen enemics? Posant a null el contingut de l'array de PVectors seria una opci\u00f3.</li> <li>Com se si ja els he eliminat a tots? Deuries portar un comptador de col\u00b7lisions. Amb una variable global es podria solucionar.</li> </ul> <p>Passem a m\u00e9s detall i comencem ja a escriure codi. Mirem amb deteniment com implementariem per exemple la funci\u00f3 Actualitzar enemics. Un diagrama de flux per al detall d'aquest m\u00e8tode podria ser el seg\u00fcent:</p> flowchart LR subgraph \\nACTUALITZAR ENEMICS\\n     direction LR     Ini((Inici))--&gt;A{Queden enemics\\nper mostrar?};     style Ini fill:#0F0;     A--&gt;|Si|B{Han passat\\n'x' segons?};     A--&gt;|No|Fi((Fi));     style Fi fill:#F00;     B--&gt;|Si|C[Genera posici\u00f3 nova\\nGuarda posici\u00f3\\nIncrementa contEnemics];     C--&gt;A;     B--&gt;|No|B; end  <p>Ara i abans de passar-se a fer l'activitat seg\u00fcent, hauries de dibuixar-te per a cadascun dels m\u00e8todes nous que han aparegut el seu diagrama de flux.</p> Activitat 16. Gesti\u00f3 d'enemics ProblemaSoluci\u00f3 <p>A partir de l'especificaci\u00f3 de requeriments anterior i el diagrama de flux de les noves funcionalitats del nostre joc. Implementa-les i afegeix-les al teu codi del projecte de la boleta.  </p> <p>Recorda que hauran d'apareixer de forma aleat\u00f2ria i cada cert temps un m\u00e0xim de 10 enemics que la nostra boleta s'haur\u00e0 de menjar per considerar el joc acabat.</p> <p>Encara no disponible</p>"}]}